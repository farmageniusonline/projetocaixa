import { test, expect } from '@playwright/test';

test('Debug: Teste simples de lan√ßamento', async ({ page }) => {
  console.log('=== DEBUG: Teste Simples de Lan√ßamento ===');

  await page.setViewportSize({ width: 1440, height: 900 });
  await page.goto('http://localhost:5175');

  // Login
  await page.fill('[data-testid="username-input"]', 'admin@manipularium.com.br');
  await page.fill('[data-testid="password-input"]', 'manipularium');
  await page.click('[data-testid="login-button"]');
  await page.waitForTimeout(3000);

  // Verificar se h√° erro ap√≥s login
  const hasError = await page.locator('text="Erro na Aplica√ß√£o"').isVisible();
  if (hasError) {
    console.log('‚ùå Erro detectado ap√≥s login');
    await page.screenshot({ path: 'debug-error-after-login.png' });
    return;
  }

  // Navegar para aba Lan√ßamentos
  console.log('üìã Navegando para aba Lan√ßamentos...');
  const launchTab = page.locator('text=Lan√ßamentos');
  const hasLaunchTab = await launchTab.count() > 0;

  if (!hasLaunchTab) {
    console.log('‚ùå Aba Lan√ßamentos n√£o encontrada');
    await page.screenshot({ path: 'debug-no-launch-tab.png' });
    return;
  }

  await launchTab.click();
  await page.waitForTimeout(2000);

  // Verificar se h√° erro ap√≥s navegar
  const hasErrorAfterNav = await page.locator('text="Erro na Aplica√ß√£o"').isVisible();
  if (hasErrorAfterNav) {
    console.log('‚ùå Erro detectado ap√≥s navegar para Lan√ßamentos');
    await page.screenshot({ path: 'debug-error-after-nav.png' });
    return;
  }

  console.log('‚úÖ Navega√ß√£o para Lan√ßamentos bem-sucedida');

  // Verificar elementos da interface usando seletores mais espec√≠ficos
  const hasPaymentButtons = await page.locator('button[aria-label="Dinheiro"]').isVisible();
  const hasValueInput = await page.locator('#launch-value-input').isVisible();
  const hasAddButton = await page.locator('button:has-text("Adicionar")').isVisible();

  console.log(`Bot√µes de pagamento vis√≠veis: ${hasPaymentButtons}`);
  console.log(`Campo de valor vis√≠vel: ${hasValueInput}`);
  console.log(`Bot√£o Adicionar vis√≠vel: ${hasAddButton}`);

  if (hasPaymentButtons && hasValueInput && hasAddButton) {
    console.log('‚úÖ Interface de lan√ßamentos carregada corretamente');

    // Tentar fazer um lan√ßamento simples
    await page.click('button[aria-label="Dinheiro"]');
    await page.waitForTimeout(500);

    await page.fill('#launch-value-input', '10,00');
    await page.waitForTimeout(500);

    console.log('üöÄ Tentando adicionar lan√ßamento...');
    await page.click('button:has-text("Adicionar")');
    await page.waitForTimeout(3000);

    // Verificar se houve erro ap√≥s adicionar
    const hasErrorAfterAdd = await page.locator('text="Erro na Aplica√ß√£o"').isVisible();
    if (hasErrorAfterAdd) {
      console.log('‚ùå Erro detectado ap√≥s adicionar lan√ßamento');
      await page.screenshot({ path: 'debug-error-after-add.png' });
    } else {
      console.log('‚úÖ Lan√ßamento adicionado sem erro JavaScript');

      // Verificar se apareceu na tabela
      const tableContent = await page.locator('tbody').textContent();
      console.log('Conte√∫do da tabela:', tableContent?.substring(0, 200));

      if (tableContent && tableContent.includes('10,00')) {
        console.log('‚úÖ Valor encontrado na tabela');
      } else {
        console.log('‚ö†Ô∏è Valor n√£o encontrado na tabela');
      }
    }
  } else {
    console.log('‚ùå Interface de lan√ßamentos n√£o carregou corretamente');
  }

  await page.screenshot({ path: 'debug-final-state.png' });
  console.log('üèÅ Debug conclu√≠do');
});