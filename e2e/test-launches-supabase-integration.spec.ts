import { test, expect } from '@playwright/test';

test.describe('Lan√ßamentos - Integra√ß√£o Supabase', () => {
  test.beforeEach(async ({ page }) => {
    // Set viewport
    await page.setViewportSize({ width: 1440, height: 900 });

    // Navigate to app
    await page.goto('http://localhost:5175');

    // Login
    await page.fill('[data-testid="username-input"]', 'admin@manipularium.com.br');
    await page.fill('[data-testid="password-input"]', 'manipularium');
    await page.click('[data-testid="login-button"]');
    await page.waitForTimeout(2000);

    // Go to Lan√ßamentos tab
    await page.click('text=Lan√ßamentos');
    await page.waitForTimeout(1000);
  });

  test('Verifica elementos da interface de sincroniza√ß√£o', async ({ page }) => {
    console.log('=== TESTE: Elementos da Interface ===');

    // Verificar se os bot√µes de sincroniza√ß√£o est√£o presentes
    const loadButton = page.locator('button:has-text("Carregar")');
    const syncButton = page.locator('button:has-text("Sync Local")');

    await expect(loadButton).toBeVisible();
    await expect(syncButton).toBeVisible();

    console.log('‚úÖ Bot√µes de sincroniza√ß√£o encontrados');

    // Verificar se o t√≠tulo est√° correto
    const title = page.locator('h2:has-text("Lan√ßamentos Manuais")');
    await expect(title).toBeVisible();

    console.log('‚úÖ T√≠tulo da aba verificado');

    // Verificar formul√°rio de adi√ß√£o
    const paymentMethodButtons = page.locator('button[data-payment-method]');
    const valueInput = page.locator('input[placeholder*="valor"]');
    const addButton = page.locator('button:has-text("Adicionar")');

    await expect(paymentMethodButtons.first()).toBeVisible();
    await expect(valueInput).toBeVisible();
    await expect(addButton).toBeVisible();

    console.log('‚úÖ Formul√°rio de lan√ßamento verificado');
  });

  test('Testa adi√ß√£o de lan√ßamento com feedback visual', async ({ page }) => {
    console.log('=== TESTE: Adi√ß√£o de Lan√ßamento ===');

    // Selecionar m√©todo de pagamento (Dinheiro)
    await page.click('button[data-payment-method="cash"]');
    await page.waitForTimeout(500);

    // Verificar se o bot√£o foi selecionado
    const selectedButton = page.locator('button[data-payment-method="cash"].bg-indigo-600');
    await expect(selectedButton).toBeVisible();

    console.log('‚úÖ M√©todo de pagamento selecionado: Dinheiro');

    // Inserir valor
    const testValue = '150.75';
    await page.fill('input[placeholder*="valor"]', testValue);

    console.log(`‚úÖ Valor inserido: R$ ${testValue}`);

    // Capturar estado antes de adicionar
    const beforeAddButton = page.locator('button:has-text("Adicionar")');
    await expect(beforeAddButton).toBeEnabled();

    // Clicar em Adicionar e verificar feedback visual
    await page.click('button:has-text("Adicionar")');

    // Verificar se o bot√£o mostra "Salvando..." (pode ser r√°pido)
    const savingButton = page.locator('button:has-text("Salvando...")');

    // Aguardar o processo completar (m√°ximo 10 segundos)
    await page.waitForTimeout(2000);

    console.log('‚úÖ Lan√ßamento processado');

    // Verificar se apareceu mensagem de sucesso ou erro
    const successMessage = page.locator('.bg-green-100, .bg-red-100, text="sucesso", text="erro"');

    // Verificar se o formul√°rio foi limpo
    const valueInputAfter = page.locator('input[placeholder*="valor"]');
    const inputValue = await valueInputAfter.inputValue();

    if (inputValue === '') {
      console.log('‚úÖ Formul√°rio limpo ap√≥s adi√ß√£o - sucesso presumido');
    } else {
      console.log('‚ö†Ô∏è Formul√°rio n√£o foi limpo - pode ter havido erro');
    }

    // Verificar se o lan√ßamento aparece na tabela
    const table = page.locator('table, .table-container');
    if (await table.count() > 0) {
      console.log('‚úÖ Tabela de lan√ßamentos encontrada');

      // Procurar pelo valor adicionado na tabela
      const valueInTable = page.locator(`text="${testValue}" >> visible=true, text="150,75" >> visible=true`);

      if (await valueInTable.count() > 0) {
        console.log('‚úÖ Valor encontrado na tabela');
      } else {
        console.log('‚ö†Ô∏è Valor n√£o encontrado na tabela (pode estar em outra p√°gina ou formato)');
      }
    }
  });

  test('Testa bot√µes de sincroniza√ß√£o', async ({ page }) => {
    console.log('=== TESTE: Bot√µes de Sincroniza√ß√£o ===');

    // Testar bot√£o "Carregar"
    const loadButton = page.locator('button:has-text("Carregar")');

    console.log('üîÑ Testando bot√£o Carregar...');
    await loadButton.click();

    // Verificar se aparece estado de carregamento
    const loadingState = page.locator('button:has-text("Carregando")');

    if (await loadingState.count() > 0) {
      console.log('‚úÖ Estado de carregamento detectado');
      // Aguardar terminar
      await page.waitForTimeout(3000);
    }

    // Verificar se voltou ao estado normal
    await expect(loadButton).toBeVisible();
    console.log('‚úÖ Bot√£o Carregar funcional');

    // Testar bot√£o "Sync Local"
    const syncButton = page.locator('button:has-text("Sync Local")');

    console.log('‚òÅÔ∏è Testando bot√£o Sync Local...');

    // Verificar se est√° habilitado (s√≥ est√° habilitado se h√° dados locais)
    const isEnabled = await syncButton.isEnabled();

    if (isEnabled) {
      await syncButton.click();

      // Verificar estado de sincroniza√ß√£o
      const syncingState = page.locator('button:has-text("Sincronizando")');

      if (await syncingState.count() > 0) {
        console.log('‚úÖ Estado de sincroniza√ß√£o detectado');
        await page.waitForTimeout(3000);
      }

      console.log('‚úÖ Bot√£o Sync Local funcional');
    } else {
      console.log('‚ÑπÔ∏è Bot√£o Sync Local desabilitado (sem dados locais para sincronizar)');
    }
  });

  test('Verifica integra√ß√£o com Confer√™ncia de Caixa', async ({ page }) => {
    console.log('=== TESTE: Integra√ß√£o com Confer√™ncia de Caixa ===');

    // Adicionar um lan√ßamento
    await page.click('button[data-payment-method="debit"]');
    await page.fill('input[placeholder*="valor"]', '89.50');
    await page.click('button:has-text("Adicionar")');

    // Aguardar processamento
    await page.waitForTimeout(2000);

    console.log('‚úÖ Lan√ßamento adicionado');

    // Ir para aba Confer√™ncia de Caixa
    await page.click('text=Confer√™ncia de Caixa');
    await page.waitForTimeout(1000);

    console.log('üîÑ Navegou para Confer√™ncia de Caixa');

    // Verificar se o lan√ßamento aparece na confer√™ncia de caixa
    const cashTable = page.locator('table, .table-container');

    if (await cashTable.count() > 0) {
      console.log('‚úÖ Tabela de confer√™ncia de caixa encontrada');

      // Procurar por "D√©bito" ou "89,50" na tabela
      const debitEntry = page.locator('text="D√©bito" >> visible=true, text="89,50" >> visible=true, text="89.50" >> visible=true');

      if (await debitEntry.count() > 0) {
        console.log('‚úÖ Lan√ßamento encontrado na Confer√™ncia de Caixa');
      } else {
        console.log('‚ö†Ô∏è Lan√ßamento n√£o encontrado na Confer√™ncia de Caixa');
      }
    } else {
      console.log('‚ö†Ô∏è Tabela de confer√™ncia n√£o encontrada');
    }

    // Voltar para Lan√ßamentos
    await page.click('text=Lan√ßamentos');
    await page.waitForTimeout(1000);
    console.log('üîÑ Voltou para aba Lan√ßamentos');
  });

  test('Verifica status de sincroniza√ß√£o', async ({ page }) => {
    console.log('=== TESTE: Status de Sincroniza√ß√£o ===');

    // Procurar por indicador de √∫ltima sincroniza√ß√£o
    const syncStatus = page.locator('text="√öltima sincroniza√ß√£o"');

    // Fazer uma a√ß√£o que dispare sincroniza√ß√£o
    const loadButton = page.locator('button:has-text("Carregar")');
    await loadButton.click();
    await page.waitForTimeout(3000);

    // Verificar se apareceu status de sincroniza√ß√£o
    if (await syncStatus.count() > 0) {
      console.log('‚úÖ Status de sincroniza√ß√£o encontrado');

      const statusText = await syncStatus.textContent();
      console.log(`‚ÑπÔ∏è Status: ${statusText}`);
    } else {
      console.log('‚ö†Ô∏è Status de sincroniza√ß√£o n√£o encontrado (pode n√£o ter dados)');
    }

    // Verificar contador de lan√ßamentos
    const launchCount = page.locator('text*="lan√ßamento(s) para"');

    if (await launchCount.count() > 0) {
      const countText = await launchCount.textContent();
      console.log(`‚úÖ Contador encontrado: ${countText}`);
    }
  });

  test('Testa fluxo completo: Adi√ß√£o ‚Üí Sync ‚Üí Carregamento', async ({ page }) => {
    console.log('=== TESTE: Fluxo Completo de Sincroniza√ß√£o ===');

    // Passo 1: Adicionar lan√ßamento
    console.log('üìù Passo 1: Adicionando lan√ßamento...');
    await page.click('button[data-payment-method="cash"]');
    await page.fill('input[placeholder*="valor"]', '75.25');
    await page.click('button:has-text("Adicionar")');
    await page.waitForTimeout(2000);

    console.log('‚úÖ Lan√ßamento adicionado');

    // Passo 2: Verificar se foi salvo (formul√°rio limpo)
    const valueInput = page.locator('input[placeholder*="valor"]');
    const inputValue = await valueInput.inputValue();

    if (inputValue === '') {
      console.log('‚úÖ Passo 2: Lan√ßamento salvo com sucesso (formul√°rio limpo)');
    } else {
      console.log('‚ö†Ô∏è Passo 2: Poss√≠vel erro no salvamento');
    }

    // Passo 3: Testar carregamento
    console.log('üîÑ Passo 3: Testando carregamento...');
    const loadButton = page.locator('button:has-text("Carregar")');
    await loadButton.click();
    await page.waitForTimeout(3000);

    console.log('‚úÖ Passo 3: Carregamento executado');

    // Passo 4: Verificar se dados persistem ap√≥s reload da p√°gina
    console.log('üîÑ Passo 4: Testando persist√™ncia ap√≥s reload...');
    await page.reload();
    await page.waitForTimeout(2000);

    // Verificar se ainda estamos na aba Lan√ßamentos
    const title = page.locator('h2:has-text("Lan√ßamentos Manuais")');
    await expect(title).toBeVisible();

    console.log('‚úÖ Passo 4: P√°gina recarregada, dados devem ter sido carregados do Supabase');

    console.log('üéâ Fluxo completo testado!');
  });
});