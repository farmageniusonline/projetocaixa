import { test, expect } from '@playwright/test';

test.describe('Investiga√ß√£o do Erro na Aba Lan√ßamentos', () => {
  test.beforeEach(async ({ page }) => {
    await page.setViewportSize({ width: 1440, height: 900 });
    await page.goto('http://localhost:5175');

    // Login
    await page.fill('[data-testid="username-input"]', 'admin@manipularium.com.br');
    await page.fill('[data-testid="password-input"]', 'manipularium');
    await page.click('[data-testid="login-button"]');
    await page.waitForTimeout(3000);
  });

  test('Investigar erro espec√≠fico na aba Lan√ßamentos', async ({ page }) => {
    console.log('=== INVESTIGA√á√ÉO: Erro na Aba Lan√ßamentos ===');

    const jsErrors: string[] = [];
    const consoleErrors: string[] = [];

    // Capturar erros JavaScript
    page.on('pageerror', error => {
      jsErrors.push(error.message);
      console.log(`‚ùå Erro JavaScript: ${error.message}`);
      console.log(`Stack: ${error.stack}`);
    });

    // Capturar erros do console
    page.on('console', msg => {
      if (msg.type() === 'error') {
        const text = msg.text();
        consoleErrors.push(text);
        console.log(`‚ö†Ô∏è Console Error: ${text}`);
      }
    });

    // Verificar se h√° erro logo ap√≥s o login
    let hasInitialError = await page.locator('text="Erro na Aplica√ß√£o"').isVisible();
    if (hasInitialError) {
      console.log('‚ùå Erro j√° presente logo ap√≥s login');
    } else {
      console.log('‚úÖ Nenhum erro inicial detectado');
    }

    // Tentar navegar para Lan√ßamentos
    console.log('üîç Tentando navegar para aba Lan√ßamentos...');

    try {
      const launchTab = page.locator('text=Lan√ßamentos');
      const tabExists = await launchTab.count();

      if (tabExists > 0) {
        console.log('‚úÖ Aba Lan√ßamentos encontrada');

        // Clicar na aba
        await launchTab.click();
        console.log('üñ±Ô∏è Clicou na aba Lan√ßamentos');

        // Aguardar um pouco para ver se erro aparece
        await page.waitForTimeout(2000);

        // Verificar se apareceu erro
        const errorAfterClick = await page.locator('text="Erro na Aplica√ß√£o"').isVisible();

        if (errorAfterClick) {
          console.log('‚ùå ERRO DETECTADO ap√≥s clicar em Lan√ßamentos');

          // Tentar expandir detalhes do erro
          const expandButton = page.locator('text="Detalhes do Erro"');
          if (await expandButton.count() > 0) {
            console.log('üîç Expandindo detalhes do erro...');
            await expandButton.click();
            await page.waitForTimeout(1000);

            // Capturar detalhes do erro
            const errorDetails = await page.locator('[class*="error"], [class*="stack"], pre, code').allTextContents();

            console.log('üìã DETALHES DO ERRO:');
            errorDetails.forEach((detail, index) => {
              if (detail.trim()) {
                console.log(`${index + 1}. ${detail.trim()}`);
              }
            });

            // Screenshot dos detalhes
            await page.screenshot({
              path: 'error-details-investigation.png',
              fullPage: true
            });
            console.log('üì∏ Screenshot dos detalhes do erro salvo');
          }
        } else {
          console.log('‚úÖ Nenhum erro detectado ap√≥s navegar para Lan√ßamentos');
        }

      } else {
        console.log('‚ùå Aba Lan√ßamentos n√£o encontrada');
      }

    } catch (error) {
      console.log(`‚ùå Erro durante navega√ß√£o: ${error}`);
    }

    // Relat√≥rio final de erros
    console.log('\\nüìä RELAT√ìRIO DE ERROS:');
    console.log(`JavaScript Errors: ${jsErrors.length}`);
    jsErrors.forEach((err, index) => {
      console.log(`  ${index + 1}. ${err}`);
    });

    console.log(`Console Errors: ${consoleErrors.length}`);
    consoleErrors.forEach((err, index) => {
      console.log(`  ${index + 1}. ${err}`);
    });

    // Screenshot final
    await page.screenshot({
      path: 'final-state-investigation.png',
      fullPage: false
    });

    console.log('üèÅ Investiga√ß√£o conclu√≠da');
  });

  test('Testar navega√ß√£o direta via URL', async ({ page }) => {
    console.log('=== TESTE: Navega√ß√£o Direta via URL ===');

    // Tentar ir diretamente para a URL com hash de lan√ßamentos
    await page.goto('http://localhost:5175/#lancamentos');
    await page.waitForTimeout(3000);

    const hasError = await page.locator('text="Erro na Aplica√ß√£o"').isVisible();

    if (hasError) {
      console.log('‚ùå Erro tamb√©m aparece na navega√ß√£o direta via URL');
    } else {
      console.log('‚úÖ Navega√ß√£o direta via URL funcionou');
    }

    await page.screenshot({
      path: 'direct-navigation-test.png',
      fullPage: false
    });

    console.log('üèÅ Teste de navega√ß√£o direta conclu√≠do');
  });
});