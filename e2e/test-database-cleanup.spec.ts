import { test, expect } from '@playwright/test';

test.describe('Teste de Limpeza do Banco de Dados', () => {
  test.beforeEach(async ({ page }) => {
    await page.setViewportSize({ width: 1440, height: 900 });
    await page.goto('http://localhost:5175');

    // Login
    await page.fill('[data-testid="username-input"]', 'admin@manipularium.com.br');
    await page.fill('[data-testid="password-input"]', 'manipularium');
    await page.click('[data-testid="login-button"]');
    await page.waitForTimeout(3000);

    // Verificar se h√° erro ap√≥s login
    const hasError = await page.locator('text="Erro na Aplica√ß√£o"').isVisible();
    if (hasError) {
      throw new Error('Erro detectado ap√≥s login');
    }
  });

  test('Verificar Bot√µes de Limpeza na Interface', async ({ page }) => {
    console.log('=== TESTE: Verificar Bot√µes de Limpeza ===');

    // Navegar para aba Lan√ßamentos
    await page.click('text=Lan√ßamentos');
    await page.waitForTimeout(2000);

    // Verificar se os novos bot√µes existem
    const clearDateButton = page.locator('button:has-text("Limpar Data")');
    const clearAllButton = page.locator('button:has-text("Limpar Tudo")');

    const hasClearDateButton = await clearDateButton.count() > 0;
    const hasClearAllButton = await clearAllButton.count() > 0;

    console.log(`üßπ Bot√£o "Limpar Data" encontrado: ${hasClearDateButton}`);
    console.log(`üóëÔ∏è Bot√£o "Limpar Tudo" encontrado: ${hasClearAllButton}`);

    expect(hasClearDateButton).toBe(true);
    expect(hasClearAllButton).toBe(true);

    // Verificar tooltips
    const clearDateTitle = await clearDateButton.getAttribute('title');
    const clearAllTitle = await clearAllButton.getAttribute('title');

    console.log(`üìù Tooltip "Limpar Data": ${clearDateTitle}`);
    console.log(`üìù Tooltip "Limpar Tudo": ${clearAllTitle}`);

    expect(clearDateTitle).toContain('data atual');
    expect(clearAllTitle).toContain('TODOS');

    console.log('‚úÖ Bot√µes de limpeza encontrados e configurados corretamente');
  });

  test('Testar Modal de Confirma√ß√£o - Limpar Data', async ({ page }) => {
    console.log('=== TESTE: Modal de Confirma√ß√£o para Limpar Data ===');

    await page.click('text=Lan√ßamentos');
    await page.waitForTimeout(2000);

    // Contar lan√ßamentos atuais
    const currentRows = await page.locator('tbody tr').count();
    console.log(`üìä Lan√ßamentos atuais na tabela: ${currentRows}`);

    if (currentRows > 1) { // Mais que a linha "Nenhum lan√ßamento"
      // Clicar no bot√£o "Limpar Data"
      await page.click('button:has-text("Limpar Data")');
      await page.waitForTimeout(1000);

      // Verificar se modal apareceu
      const modal = page.locator('text="Confirmar Exclus√£o"');
      const hasModal = await modal.isVisible();

      console.log(`üì± Modal de confirma√ß√£o apareceu: ${hasModal}`);
      expect(hasModal).toBe(true);

      // Verificar conte√∫do do modal
      const modalContent = await page.locator('[class*="modal"], .fixed').textContent();
      console.log(`üìÑ Conte√∫do do modal:`, modalContent?.substring(0, 200));

      // Verificar se cont√©m informa√ß√µes da data
      expect(modalContent).toContain('data');
      expect(modalContent).toContain('Esta a√ß√£o n√£o pode ser desfeita');

      // Cancelar para n√£o excluir
      await page.click('text=Cancelar');
      await page.waitForTimeout(1000);

      // Verificar se modal fechou
      const modalAfterCancel = await modal.isVisible();
      console.log(`üì± Modal fechou ap√≥s cancelar: ${!modalAfterCancel}`);
      expect(modalAfterCancel).toBe(false);

      console.log('‚úÖ Modal de confirma√ß√£o para data funcionando corretamente');
    } else {
      console.log('‚ö†Ô∏è N√£o h√° lan√ßamentos para testar a limpeza');
    }
  });

  test('Testar Modal de Confirma√ß√£o - Limpar Tudo', async ({ page }) => {
    console.log('=== TESTE: Modal de Confirma√ß√£o para Limpar Tudo ===');

    await page.click('text=Lan√ßamentos');
    await page.waitForTimeout(2000);

    // Contar lan√ßamentos atuais
    const currentRows = await page.locator('tbody tr').count();
    console.log(`üìä Lan√ßamentos atuais na tabela: ${currentRows}`);

    if (currentRows > 1) { // Mais que a linha "Nenhum lan√ßamento"
      // Clicar no bot√£o "Limpar Tudo"
      await page.click('button:has-text("Limpar Tudo")');
      await page.waitForTimeout(1000);

      // Verificar se modal apareceu
      const modal = page.locator('text="Confirmar Exclus√£o"');
      const hasModal = await modal.isVisible();

      console.log(`üì± Modal de confirma√ß√£o apareceu: ${hasModal}`);
      expect(hasModal).toBe(true);

      // Verificar conte√∫do do modal
      const modalContent = await page.locator('[class*="modal"], .fixed').textContent();
      console.log(`üìÑ Conte√∫do do modal:`, modalContent?.substring(0, 300));

      // Verificar se cont√©m informa√ß√µes gerais
      expect(modalContent).toContain('TODOS');
      expect(modalContent).toContain('banco de dados');
      expect(modalContent).toContain('Total de lan√ßamentos');

      // Cancelar para n√£o excluir
      await page.click('text=Cancelar');
      await page.waitForTimeout(1000);

      // Verificar se modal fechou
      const modalAfterCancel = await modal.isVisible();
      console.log(`üì± Modal fechou ap√≥s cancelar: ${!modalAfterCancel}`);
      expect(modalAfterCancel).toBe(false);

      console.log('‚úÖ Modal de confirma√ß√£o geral funcionando corretamente');
    } else {
      console.log('‚ö†Ô∏è N√£o h√° lan√ßamentos para testar a limpeza');
    }
  });

  test('Verificar Estados dos Bot√µes', async ({ page }) => {
    console.log('=== TESTE: Estados dos Bot√µes de Limpeza ===');

    await page.click('text=Lan√ßamentos');
    await page.waitForTimeout(2000);

    // Verificar se bot√µes est√£o habilitados/desabilitados conforme esperado
    const clearDateButton = page.locator('button:has-text("Limpar Data")');
    const clearAllButton = page.locator('button:has-text("Limpar Tudo")');

    const clearDateDisabled = await clearDateButton.getAttribute('disabled');
    const clearAllDisabled = await clearAllButton.getAttribute('disabled');

    console.log(`üîí Bot√£o "Limpar Data" desabilitado: ${clearDateDisabled !== null}`);
    console.log(`üîí Bot√£o "Limpar Tudo" desabilitado: ${clearAllDisabled !== null}`);

    // Se h√° lan√ßamentos, bot√µes devem estar habilitados
    const currentRows = await page.locator('tbody tr').count();
    if (currentRows > 1) {
      expect(clearDateDisabled).toBeNull(); // N√£o deve estar desabilitado
      expect(clearAllDisabled).toBeNull(); // N√£o deve estar desabilitado
      console.log('‚úÖ Bot√µes habilitados quando h√° lan√ßamentos');
    } else {
      // Se n√£o h√° lan√ßamentos, bot√µes podem estar desabilitados
      console.log('‚ö†Ô∏è N√£o h√° lan√ßamentos - bot√µes podem estar desabilitados');
    }

    // Verificar classes CSS
    const clearDateClasses = await clearDateButton.getAttribute('class');
    const clearAllClasses = await clearAllButton.getAttribute('class');

    console.log(`üé® Classes do bot√£o "Limpar Data": ${clearDateClasses}`);
    console.log(`üé® Classes do bot√£o "Limpar Tudo": ${clearAllClasses}`);

    // Verificar cores apropriadas
    expect(clearDateClasses).toContain('bg-orange-600'); // Laranja para data
    expect(clearAllClasses).toContain('bg-red-600'); // Vermelho para tudo

    console.log('‚úÖ Estados e cores dos bot√µes corretos');
  });

  test('Testar Adi√ß√£o de Lan√ßamento e Verificar Bot√µes', async ({ page }) => {
    console.log('=== TESTE: Adicionar Lan√ßamento e Verificar Bot√µes ===');

    await page.click('text=Lan√ßamentos');
    await page.waitForTimeout(2000);

    // Adicionar um lan√ßamento para garantir que h√° dados
    await page.click('button[aria-label="Dinheiro"]');
    await page.fill('#launch-value-input', '99,99');
    await page.click('button:has-text("Adicionar")');
    await page.waitForTimeout(3000);

    // Verificar se lan√ßamento foi adicionado
    const tableContent = await page.locator('tbody').textContent();
    const hasNewLaunch = tableContent?.includes('99,99');

    console.log(`üí∞ Lan√ßamento de R$ 99,99 adicionado: ${hasNewLaunch}`);

    if (hasNewLaunch) {
      // Verificar se bot√µes agora est√£o habilitados
      const clearDateButton = page.locator('button:has-text("Limpar Data")');
      const clearAllButton = page.locator('button:has-text("Limpar Tudo")');

      const clearDateDisabled = await clearDateButton.getAttribute('disabled');
      const clearAllDisabled = await clearAllButton.getAttribute('disabled');

      console.log(`üîì Bot√£o "Limpar Data" habilitado: ${clearDateDisabled === null}`);
      console.log(`üîì Bot√£o "Limpar Tudo" habilitado: ${clearAllDisabled === null}`);

      expect(clearDateDisabled).toBeNull();
      expect(clearAllDisabled).toBeNull();

      console.log('‚úÖ Bot√µes habilitados ap√≥s adi√ß√£o de lan√ßamento');
    }

    // Screenshot para documenta√ß√£o
    await page.screenshot({
      path: 'database-cleanup-buttons.png',
      fullPage: false
    });

    console.log('üèÅ Teste de funcionalidade b√°sica conclu√≠do');
  });
});