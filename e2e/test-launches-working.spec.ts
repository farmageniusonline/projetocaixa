import { test, expect } from '@playwright/test';

test.describe('Lan√ßamentos - Teste Funcional (Ap√≥s Corre√ß√£o SQL)', () => {
  test.beforeEach(async ({ page }) => {
    await page.setViewportSize({ width: 1440, height: 900 });
    await page.goto('http://localhost:5175');

    // Login
    await page.fill('[data-testid="username-input"]', 'admin@manipularium.com.br');
    await page.fill('[data-testid="password-input"]', 'manipularium');
    await page.click('[data-testid="login-button"]');

    // Aguardar o login processar
    await page.waitForTimeout(3000);
  });

  test('Verifica se a aplica√ß√£o carrega sem erros ap√≥s corre√ß√£o SQL', async ({ page }) => {
    console.log('=== TESTE: Verifica√ß√£o P√≥s-Corre√ß√£o SQL ===');

    // Verificar se N√ÉO aparece tela de erro
    const errorScreen = page.locator('text="Erro na Aplica√ß√£o"');
    const hasError = await errorScreen.count();

    if (hasError > 0) {
      console.log('‚ùå ATEN√á√ÉO: Ainda h√° erro na aplica√ß√£o!');
      console.log('üîß Voc√™ precisa executar o SQL de corre√ß√£o no Supabase:');
      console.log('   üìÅ supabase/complete-setup.sql');

      await page.screenshot({
        path: 'still-has-error.png',
        fullPage: true
      });

      // N√£o falhar o teste, apenas avisar
      console.log('‚ÑπÔ∏è  Este teste pressup√µe que o SQL foi executado no Supabase');
      return;
    }

    console.log('‚úÖ Nenhuma tela de erro detectada');

    // Verificar se a aba Lan√ßamentos est√° presente
    const launchTab = page.locator('text=Lan√ßamentos');
    await expect(launchTab).toBeVisible();
    console.log('‚úÖ Aba Lan√ßamentos encontrada');

    // Clicar na aba Lan√ßamentos
    await launchTab.click();
    await page.waitForTimeout(2000);

    // Verificar se o conte√∫do da aba carregou
    const pageContent = await page.textContent('body');

    // Procurar por elementos t√≠picos da aba Lan√ßamentos
    const hasLaunchContent = (
      pageContent?.includes('Lan√ßamentos') &&
      (pageContent?.includes('Adicionar') ||
       pageContent?.includes('Dinheiro') ||
       pageContent?.includes('D√©bito') ||
       pageContent?.includes('Carregar'))
    );

    if (hasLaunchContent) {
      console.log('‚úÖ Conte√∫do da aba Lan√ßamentos carregado corretamente');

      // Tentar encontrar elementos espec√≠ficos
      const addButton = page.locator('button:has-text("Adicionar")');
      const loadButton = page.locator('button:has-text("Carregar")');
      const paymentButtons = page.locator('button[data-payment-method]');

      if (await addButton.count() > 0) {
        console.log('‚úÖ Bot√£o "Adicionar" encontrado');
      }

      if (await loadButton.count() > 0) {
        console.log('‚úÖ Bot√£o "Carregar" encontrado');
      }

      if (await paymentButtons.count() > 0) {
        console.log('‚úÖ Bot√µes de m√©todo de pagamento encontrados');
      }

    } else {
      console.log('‚ö†Ô∏è Conte√∫do da aba pode n√£o ter carregado completamente');
    }

    // Screenshot final para verifica√ß√£o visual
    await page.screenshot({
      path: 'launches-tab-working.png',
      fullPage: false
    });

    console.log('üì∏ Screenshot salvo: launches-tab-working.png');
    console.log('üéâ Teste de verifica√ß√£o conclu√≠do!');
  });

  test('Teste b√°sico de adi√ß√£o de lan√ßamento (se funcionando)', async ({ page }) => {
    console.log('=== TESTE: Adi√ß√£o B√°sica de Lan√ßamento ===');

    // Verificar se n√£o h√° erro
    const errorScreen = page.locator('text="Erro na Aplica√ß√£o"');
    if (await errorScreen.count() > 0) {
      console.log('‚è≠Ô∏è Pulando teste - aplica√ß√£o com erro (execute SQL primeiro)');
      return;
    }

    // Ir para aba Lan√ßamentos
    const launchTab = page.locator('text=Lan√ßamentos');
    if (await launchTab.count() > 0) {
      await launchTab.click();
      await page.waitForTimeout(2000);
    }

    // Tentar adicionar um lan√ßamento simples
    try {
      // Procurar por bot√£o de m√©todo de pagamento
      const cashButton = page.locator('button[data-payment-method="cash"]');

      if (await cashButton.count() > 0) {
        await cashButton.click();
        console.log('‚úÖ M√©todo "Dinheiro" selecionado');

        // Procurar campo de valor
        const valueInput = page.locator('input[placeholder*="valor"]');

        if (await valueInput.count() > 0) {
          await valueInput.fill('50.00');
          console.log('‚úÖ Valor R$ 50,00 inserido');

          // Procurar bot√£o adicionar
          const addButton = page.locator('button:has-text("Adicionar")');

          if (await addButton.count() > 0) {
            await addButton.click();
            console.log('‚úÖ Bot√£o "Adicionar" clicado');

            // Aguardar processamento
            await page.waitForTimeout(3000);

            // Verificar se campo foi limpo (indica sucesso)
            const valueAfter = await valueInput.inputValue();
            if (valueAfter === '') {
              console.log('‚úÖ Lan√ßamento salvo com sucesso (campo limpo)');
            } else {
              console.log('‚ö†Ô∏è Campo n√£o foi limpo - verificar logs');
            }
          }
        }
      }

    } catch (error) {
      console.log('‚ö†Ô∏è Erro durante teste de adi√ß√£o:', error);
    }

    console.log('üèÅ Teste de adi√ß√£o conclu√≠do');
  });
});