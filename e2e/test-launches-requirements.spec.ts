import { test, expect } from '@playwright/test';

test.describe('Lan√ßamentos - Crit√©rios de Aceite', () => {
  test.beforeEach(async ({ page }) => {
    await page.setViewportSize({ width: 1440, height: 900 });
    await page.goto('http://localhost:5175');

    // Login
    await page.fill('[data-testid="username-input"]', 'admin@manipularium.com.br');
    await page.fill('[data-testid="password-input"]', 'manipularium');
    await page.click('[data-testid="login-button"]');
    await page.waitForTimeout(3000);
  });

  test('Crit√©rio 1: Todo valor lan√ßado deve aparecer imediatamente na tabela principal', async ({ page }) => {
    console.log('=== TESTE: Exibi√ß√£o Imediata na Tabela ===');

    // Navegar para aba Lan√ßamentos
    await page.click('text=Lan√ßamentos');
    await page.waitForTimeout(1000);

    // Contar itens na tabela antes do lan√ßamento
    const initialRowCount = await page.locator('tbody tr').count();
    console.log(`Linhas iniciais na tabela: ${initialRowCount}`);

    // Selecionar m√©todo de pagamento
    await page.click('button[aria-label="Dinheiro"]');

    // Inserir valor
    const testValue = '50,00';
    await page.fill('#launch-value-input', testValue);

    // Adicionar lan√ßamento
    await page.click('button:has-text("Adicionar")');

    // Aguardar processamento
    await page.waitForTimeout(2000);

    // Verificar se apareceu na tabela imediatamente
    const finalRowCount = await page.locator('tbody tr').count();
    console.log(`Linhas finais na tabela: ${finalRowCount}`);

    // Deve ter uma linha a mais
    expect(finalRowCount).toBe(initialRowCount + 1);

    // Verificar se o valor est√° vis√≠vel na tabela
    const tableContent = await page.locator('tbody').textContent();
    expect(tableContent).toContain('Dinheiro');
    expect(tableContent).toContain('50,00');

    console.log('‚úÖ Lan√ßamento apareceu imediatamente na tabela');
  });

  test('Crit√©rio 2: Data "Conferido em" deve usar data do lan√ßamento, n√£o data atual', async ({ page }) => {
    console.log('=== TESTE: Data Conferido em Correta ===');

    // Navegar para aba Lan√ßamentos
    await page.click('text=Lan√ßamentos');
    await page.waitForTimeout(1000);

    // Definir uma data espec√≠fica (diferente de hoje)
    const targetDate = '2024-01-15'; // Data espec√≠fica para teste
    await page.fill('input[type="date"]', targetDate);
    await page.click('text=Aplicar');
    await page.waitForTimeout(1000);

    // Selecionar m√©todo de pagamento
    await page.click('button[aria-label="D√©bito"]');

    // Inserir valor
    await page.fill('#launch-value-input', '25,50');

    // Adicionar lan√ßamento
    await page.click('button:has-text("Adicionar")');
    await page.waitForTimeout(2000);

    // Navegar para Confer√™ncia de Caixa para verificar a data
    await page.click('text=Confer√™ncia de Caixa');
    await page.waitForTimeout(2000);

    // Procurar pelo lan√ßamento na tabela de confer√™ncia
    const conferenceTable = page.locator('[data-testid="conference-table"], table').first();
    const conferenceContent = await conferenceTable.textContent();

    // Verificar se cont√©m o valor e se a data est√° correta
    if (conferenceContent && conferenceContent.includes('25,50')) {
      console.log('‚úÖ Lan√ßamento encontrado na Confer√™ncia de Caixa');

      // A data deve ser 15/01/2024 (formato brasileiro), n√£o a data atual
      const shouldContainDate = '15/01/2024';
      expect(conferenceContent).toContain(shouldContainDate);
      console.log(`‚úÖ Data correta encontrada: ${shouldContainDate}`);
    } else {
      console.log('‚ö†Ô∏è Lan√ßamento n√£o encontrado na Confer√™ncia de Caixa ou n√£o foi transferido');
    }
  });

  test('Crit√©rio 3: Nenhuma duplicidade deve ser criada', async ({ page }) => {
    console.log('=== TESTE: Preven√ß√£o de Duplicidades ===');

    // Navegar para aba Lan√ßamentos
    await page.click('text=Lan√ßamentos');
    await page.waitForTimeout(1000);

    // Fazer o primeiro lan√ßamento
    await page.click('button[aria-label="Cart√£o de Cr√©dito 1x"]');
    await page.click('text=N√£o'); // Link: N√£o
    await page.fill('#launch-value-input', '100,00');
    await page.click('text=Adicionar');
    await page.waitForTimeout(2000);

    // Contar lan√ßamentos na tabela de Lan√ßamentos
    const launchesRowCount = await page.locator('tbody tr').count();
    console.log(`Lan√ßamentos na aba Lan√ßamentos: ${launchesRowCount}`);

    // Navegar para Confer√™ncia de Caixa
    await page.click('text=Confer√™ncia de Caixa');
    await page.waitForTimeout(2000);

    // Contar itens na Confer√™ncia de Caixa que contenham '100,00'
    const conferenceRows = await page.locator('table tbody tr').count();
    const conferenceContent = await page.locator('table tbody').textContent();

    const occurrences = (conferenceContent || '').split('100,00').length - 1;
    console.log(`Ocorr√™ncias de '100,00' na Confer√™ncia de Caixa: ${occurrences}`);

    // Deve haver exatamente 1 ocorr√™ncia (sem duplicidade)
    expect(occurrences).toBeLessThanOrEqual(1);

    if (occurrences === 1) {
      console.log('‚úÖ Lan√ßamento transferido para Confer√™ncia sem duplicidade');
    } else if (occurrences === 0) {
      console.log('‚ö†Ô∏è Lan√ßamento n√£o foi transferido para Confer√™ncia de Caixa');
    }
  });

  test('Crit√©rio 4: Fluxo completo - Lan√ßamento aparecer em ambas as abas', async ({ page }) => {
    console.log('=== TESTE: Fluxo Completo ===');

    // Navegar para aba Lan√ßamentos
    await page.click('text=Lan√ßamentos');
    await page.waitForTimeout(1000);

    // Fazer lan√ßamento
    await page.click('button[aria-label="Moedas"]');
    await page.fill('#launch-value-input', '15,75');
    await page.click('text=Adicionar');
    await page.waitForTimeout(2000);

    // Verificar na aba Lan√ßamentos
    let tableContent = await page.locator('tbody').textContent();
    expect(tableContent).toContain('Moedas');
    expect(tableContent).toContain('15,75');
    console.log('‚úÖ Lan√ßamento vis√≠vel na aba Lan√ßamentos');

    // Navegar para Confer√™ncia de Caixa
    await page.click('text=Confer√™ncia de Caixa');
    await page.waitForTimeout(2000);

    // Verificar na Confer√™ncia de Caixa
    const conferenceTableContent = await page.locator('table tbody').textContent();

    if (conferenceTableContent && conferenceTableContent.includes('15,75')) {
      console.log('‚úÖ Lan√ßamento tamb√©m vis√≠vel na Confer√™ncia de Caixa');

      // Verificar se cont√©m 'Manual' na descri√ß√£o
      expect(conferenceTableContent).toContain('Manual');
      console.log('‚úÖ Origem "Manual" identificada corretamente');
    } else {
      console.log('‚ö†Ô∏è Lan√ßamento n√£o encontrado na Confer√™ncia de Caixa');
    }

    // Screenshot final para documenta√ß√£o
    await page.screenshot({
      path: 'test-launches-complete-flow.png',
      fullPage: true
    });

    console.log('üèÅ Teste de fluxo completo conclu√≠do');
  });
});