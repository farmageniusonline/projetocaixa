import { test, expect } from '@playwright/test';

test.describe('Teste Completo de Todas as Funcionalidades', () => {
  test.beforeEach(async ({ page }) => {
    await page.setViewportSize({ width: 1440, height: 900 });
    await page.goto('http://localhost:5175');

    // Login
    await page.fill('[data-testid="username-input"]', 'admin@manipularium.com.br');
    await page.fill('[data-testid="password-input"]', 'manipularium');
    await page.click('[data-testid="login-button"]');
    await page.waitForTimeout(3000);
  });

  test('‚úÖ Teste 1: Funcionalidade de Lan√ßamentos com Supabase', async ({ page }) => {
    console.log('=== TESTE 1: Lan√ßamentos ===');

    // Ir para aba Lan√ßamentos
    await page.click('text=Lan√ßamentos');
    await page.waitForTimeout(2000);

    // Verificar se n√£o h√° erro cr√≠tico
    const errorScreen = page.locator('text="Erro na Aplica√ß√£o"');
    await expect(errorScreen).not.toBeVisible();
    console.log('‚úÖ Aba Lan√ßamentos carregou sem erro');

    // Testar adi√ß√£o de lan√ßamento - Dinheiro
    const cashButton = page.locator('button[data-payment-method="cash"]');
    if (await cashButton.count() > 0) {
      await cashButton.click();
      console.log('‚úÖ Bot√£o Dinheiro clicado');

      // Inserir valor
      const valueInput = page.locator('input[type="number"]').first();
      if (await valueInput.count() > 0) {
        await valueInput.fill('50.75');
        console.log('‚úÖ Valor R$ 50,75 inserido');

        // Adicionar lan√ßamento
        const addButton = page.locator('button:has-text("Adicionar")');
        if (await addButton.count() > 0) {
          await addButton.click();
          await page.waitForTimeout(2000);
          console.log('‚úÖ Lan√ßamento adicionado');

          // Verificar se apareceu na lista
          const launchList = page.locator('[data-testid="launch-list"], .launch-item, [class*="launch"]');
          if (await launchList.count() > 0) {
            console.log('‚úÖ Lan√ßamento apareceu na lista');
          } else {
            console.log('‚ö†Ô∏è Lan√ßamento pode n√£o estar vis√≠vel na lista');
          }
        } else {
          console.log('‚ö†Ô∏è Bot√£o Adicionar n√£o encontrado');
        }
      } else {
        console.log('‚ö†Ô∏è Campo de valor n√£o encontrado');
      }
    } else {
      console.log('‚ö†Ô∏è Bot√£o Dinheiro n√£o encontrado');
    }

    // Testar outros m√©todos de pagamento
    const paymentMethods = ['debit', 'credit', 'pix'];
    for (const method of paymentMethods) {
      const methodButton = page.locator(`button[data-payment-method="${method}"]`);
      if (await methodButton.count() > 0) {
        await methodButton.click();
        console.log(`‚úÖ M√©todo ${method} funcional`);
        await page.waitForTimeout(500);
      }
    }

    console.log('üéâ Teste 1 conclu√≠do: Lan√ßamentos');
  });

  test('‚úÖ Teste 2: Confer√™ncia Banc√°ria - Upload e Busca', async ({ page }) => {
    console.log('=== TESTE 2: Confer√™ncia Banc√°ria ===');

    // Ir para aba Confer√™ncia Banc√°ria
    await page.click('text=Confer√™ncia Banc√°ria');
    await page.waitForTimeout(2000);

    // Verificar se n√£o h√° erro cr√≠tico
    const errorScreen = page.locator('text="Erro na Aplica√ß√£o"');
    await expect(errorScreen).not.toBeVisible();
    console.log('‚úÖ Aba Confer√™ncia Banc√°ria carregou sem erro');

    // Verificar indicador de status de dados
    const statusIndicator = page.locator('text=/Sem dados|itens/');
    if (await statusIndicator.count() > 0) {
      const statusText = await statusIndicator.textContent();
      console.log(`‚úÖ Indicador de status encontrado: ${statusText}`);
    }

    // Verificar se campo de confer√™ncia est√° desabilitado sem dados
    const conferenceInput = page.locator('input[placeholder*="Carregue uma planilha primeiro"], input[placeholder*="Digite o valor"]');
    if (await conferenceInput.count() > 0) {
      const isDisabled = await conferenceInput.isDisabled();
      if (isDisabled) {
        console.log('‚úÖ Campo de confer√™ncia desabilitado quando sem dados');
      }

      // Verificar placeholder
      const placeholder = await conferenceInput.getAttribute('placeholder');
      if (placeholder?.includes('Carregue uma planilha primeiro')) {
        console.log('‚úÖ Placeholder informativo quando sem dados');
      }
    }

    // Testar bot√£o de upload (simulado)
    const uploadArea = page.locator('[data-testid="file-upload"], input[type="file"], .upload-area');
    if (await uploadArea.count() > 0) {
      console.log('‚úÖ √Årea de upload encontrada');
    }

    // Testar busca sem dados (deve mostrar erro adequado)
    const searchButton = page.locator('button:has-text("OK")');
    if (await searchButton.count() > 0) {
      const isDisabled = await searchButton.isDisabled();
      if (isDisabled) {
        console.log('‚úÖ Bot√£o de busca desabilitado quando sem dados');
      }
    }

    console.log('üéâ Teste 2 conclu√≠do: Confer√™ncia Banc√°ria');
  });

  test('‚úÖ Teste 3: Confer√™ncia de Caixa', async ({ page }) => {
    console.log('=== TESTE 3: Confer√™ncia de Caixa ===');

    // Ir para aba Confer√™ncia de Caixa
    await page.click('text=Confer√™ncia de Caixa');
    await page.waitForTimeout(2000);

    // Verificar se n√£o h√° erro cr√≠tico
    const errorScreen = page.locator('text="Erro na Aplica√ß√£o"');
    await expect(errorScreen).not.toBeVisible();
    console.log('‚úÖ Aba Confer√™ncia de Caixa carregou sem erro');

    // Verificar elementos da interface
    const cashElements = page.locator('text=/Caixa|Dinheiro|Total/i');
    const elementCount = await cashElements.count();
    if (elementCount > 0) {
      console.log(`‚úÖ ${elementCount} elementos de caixa encontrados`);
    }

    // Verificar se h√° campos de input para valores
    const inputs = page.locator('input[type="number"], input[type="text"]');
    const inputCount = await inputs.count();
    if (inputCount > 0) {
      console.log(`‚úÖ ${inputCount} campos de input encontrados`);
    }

    // Verificar se h√° bot√µes funcionais
    const buttons = page.locator('button:not([disabled])');
    const buttonCount = await buttons.count();
    if (buttonCount > 0) {
      console.log(`‚úÖ ${buttonCount} bot√µes ativos encontrados`);
    }

    console.log('üéâ Teste 3 conclu√≠do: Confer√™ncia de Caixa');
  });

  test('‚úÖ Teste 4: Relat√≥rio Di√°rio', async ({ page }) => {
    console.log('=== TESTE 4: Relat√≥rio Di√°rio ===');

    // Ir para aba Relat√≥rio Di√°rio
    await page.click('text=Relat√≥rio Di√°rio');
    await page.waitForTimeout(2000);

    // Verificar se n√£o h√° erro cr√≠tico
    const errorScreen = page.locator('text="Erro na Aplica√ß√£o"');
    await expect(errorScreen).not.toBeVisible();
    console.log('‚úÖ Aba Relat√≥rio Di√°rio carregou sem erro');

    // Verificar t√≠tulo do relat√≥rio
    const reportTitle = page.locator('text=/Relat√≥rio Di√°rio|üìä/');
    if (await reportTitle.count() > 0) {
      console.log('‚úÖ T√≠tulo do relat√≥rio encontrado');
    }

    // Verificar se h√° dados de resumo
    const summaryCards = page.locator('[class*="card"], [class*="summary"], .bg-gray-800');
    const cardCount = await summaryCards.count();
    if (cardCount > 0) {
      console.log(`‚úÖ ${cardCount} cards de resumo encontrados`);
    }

    // Verificar se h√° informa√ß√µes monet√°rias
    const monetaryInfo = page.locator('text=/R\$|Total|Valor/');
    const moneyCount = await monetaryInfo.count();
    if (moneyCount > 0) {
      console.log(`‚úÖ ${moneyCount} informa√ß√µes monet√°rias encontradas`);
    }

    console.log('üéâ Teste 4 conclu√≠do: Relat√≥rio Di√°rio');
  });

  test('‚úÖ Teste 5: A√ß√µes (Actions)', async ({ page }) => {
    console.log('=== TESTE 5: A√ß√µes ===');

    // Ir para aba A√ß√µes
    await page.click('text=A√ß√µes');
    await page.waitForTimeout(2000);

    // Verificar se n√£o h√° erro cr√≠tico
    const errorScreen = page.locator('text="Erro na Aplica√ß√£o"');
    await expect(errorScreen).not.toBeVisible();
    console.log('‚úÖ Aba A√ß√µes carregou sem erro');

    // Verificar se h√° lista de a√ß√µes/logs
    const actionsList = page.locator('[data-testid="actions-list"], .action-item, [class*="action"], [class*="log"]');
    if (await actionsList.count() > 0) {
      console.log('‚úÖ Lista de a√ß√µes encontrada');
    }

    // Verificar se h√° timestamps ou informa√ß√µes de data
    const timestamps = page.locator('text=/\\d{2}:\\d{2}|\\d{2}\/\\d{2}|ago|minutes|hours/');
    const timeCount = await timestamps.count();
    if (timeCount > 0) {
      console.log(`‚úÖ ${timeCount} timestamps encontrados`);
    }

    console.log('üéâ Teste 5 conclu√≠do: A√ß√µes');
  });

  test('‚úÖ Teste 6: Backup', async ({ page }) => {
    console.log('=== TESTE 6: Backup ===');

    // Ir para aba Backup
    await page.click('text=Backup');
    await page.waitForTimeout(2000);

    // Verificar se n√£o h√° erro cr√≠tico
    const errorScreen = page.locator('text="Erro na Aplica√ß√£o"');
    await expect(errorScreen).not.toBeVisible();
    console.log('‚úÖ Aba Backup carregou sem erro');

    // Verificar se h√° op√ß√µes de backup
    const backupOptions = page.locator('button:has-text("Backup"), button:has-text("Download"), button:has-text("Export")');
    const optionCount = await backupOptions.count();
    if (optionCount > 0) {
      console.log(`‚úÖ ${optionCount} op√ß√µes de backup encontradas`);
    }

    // Verificar se h√° informa√ß√µes sobre backup
    const backupInfo = page.locator('text=/Backup|Download|Export|Dados/i');
    const infoCount = await backupInfo.count();
    if (infoCount > 0) {
      console.log(`‚úÖ ${infoCount} informa√ß√µes de backup encontradas`);
    }

    console.log('üéâ Teste 6 conclu√≠do: Backup');
  });

  test('‚úÖ Teste 7: Navega√ß√£o e Interface Geral', async ({ page }) => {
    console.log('=== TESTE 7: Navega√ß√£o Geral ===');

    // Testar navega√ß√£o entre todas as abas
    const tabs = ['Lan√ßamentos', 'Confer√™ncia Banc√°ria', 'Confer√™ncia de Caixa', 'Relat√≥rio Di√°rio', 'A√ß√µes', 'Backup'];

    for (const tab of tabs) {
      await page.click(`text=${tab}`);
      await page.waitForTimeout(1000);

      // Verificar se n√£o h√° erro ap√≥s navega√ß√£o
      const errorScreen = page.locator('text="Erro na Aplica√ß√£o"');
      await expect(errorScreen).not.toBeVisible();
      console.log(`‚úÖ Navega√ß√£o para ${tab} funcionando`);
    }

    // Verificar se logout funciona
    const logoutButton = page.locator('button:has-text("Sair")');
    if (await logoutButton.count() > 0) {
      console.log('‚úÖ Bot√£o de logout encontrado');
    }

    // Verificar se h√° informa√ß√µes do usu√°rio
    const userInfo = page.locator('text=admin');
    if (await userInfo.count() > 0) {
      console.log('‚úÖ Informa√ß√µes do usu√°rio vis√≠veis');
    }

    console.log('üéâ Teste 7 conclu√≠do: Navega√ß√£o Geral');
  });

  test('üîç Teste 8: Detec√ß√£o de Erros JavaScript', async ({ page }) => {
    console.log('=== TESTE 8: Detec√ß√£o de Erros ===');

    const jsErrors: string[] = [];
    const consoleErrors: string[] = [];

    // Capturar erros JavaScript
    page.on('pageerror', error => {
      jsErrors.push(error.message);
      console.log(`‚ùå Erro JavaScript: ${error.message}`);
    });

    // Capturar erros do console
    page.on('console', msg => {
      if (msg.type() === 'error') {
        const text = msg.text();
        // Filtrar erros conhecidos e n√£o-cr√≠ticos
        if (!text.includes('Failed to load resource') &&
            !text.includes('RLS') &&
            !text.includes('row-level security') &&
            !text.includes('404')) {
          consoleErrors.push(text);
          console.log(`‚ö†Ô∏è Console Error: ${text}`);
        }
      }
    });

    // Navegar por todas as abas para detectar erros
    const tabs = ['Lan√ßamentos', 'Confer√™ncia Banc√°ria', 'Confer√™ncia de Caixa', 'Relat√≥rio Di√°rio', 'A√ß√µes', 'Backup'];

    for (const tab of tabs) {
      await page.click(`text=${tab}`);
      await page.waitForTimeout(2000);

      // Tentar interagir com elementos da p√°gina para provocar poss√≠veis erros
      const buttons = page.locator('button:not([disabled])');
      const buttonCount = Math.min(await buttons.count(), 3); // Testar at√© 3 bot√µes por aba

      for (let i = 0; i < buttonCount; i++) {
        try {
          await buttons.nth(i).click();
          await page.waitForTimeout(500);
        } catch (error) {
          console.log(`‚ö†Ô∏è Erro ao clicar no bot√£o ${i} da aba ${tab}: ${error}`);
        }
      }
    }

    // Verificar se h√° erros cr√≠ticos
    const criticalJsErrors = jsErrors.filter(error =>
      error.includes('Cannot read') ||
      error.includes('undefined') ||
      error.includes('ReferenceError') ||
      error.includes('TypeError')
    );

    const criticalConsoleErrors = consoleErrors.filter(error =>
      error.includes('Cannot read') ||
      error.includes('undefined') ||
      error.includes('ReferenceError') ||
      error.includes('TypeError')
    );

    expect(criticalJsErrors.length).toBe(0);
    expect(criticalConsoleErrors.length).toBe(0);

    if (jsErrors.length === 0 && consoleErrors.length === 0) {
      console.log('‚úÖ Nenhum erro JavaScript detectado');
    } else {
      console.log(`‚ÑπÔ∏è ${jsErrors.length} erros JS e ${consoleErrors.length} erros de console (n√£o-cr√≠ticos)`);
    }

    console.log('üéâ Teste 8 conclu√≠do: Detec√ß√£o de Erros');
  });

  test('üéØ Teste 9: Teste Espec√≠fico da Corre√ß√£o de Confer√™ncia', async ({ page }) => {
    console.log('=== TESTE 9: Corre√ß√£o de Confer√™ncia ===');

    // Ir para aba Confer√™ncia Banc√°ria
    await page.click('text=Confer√™ncia Banc√°ria');
    await page.waitForTimeout(2000);

    // Verificar indicador de status
    const statusIndicator = page.locator('text="Sem dados"');
    if (await statusIndicator.count() > 0) {
      console.log('‚úÖ Indicador "Sem dados" funcionando');
    }

    // Verificar placeholder do input
    const input = page.locator('input[placeholder*="Carregue uma planilha primeiro"]');
    if (await input.count() > 0) {
      console.log('‚úÖ Placeholder informativo presente');

      // Verificar se est√° desabilitado
      const isDisabled = await input.isDisabled();
      if (isDisabled) {
        console.log('‚úÖ Input desabilitado quando sem dados');
      }
    }

    // Verificar mensagem de ajuda
    const helpMessage = page.locator('text="Carregue uma planilha para usar esta fun√ß√£o"');
    if (await helpMessage.count() > 0) {
      console.log('‚úÖ Mensagem de ajuda presente');
    }

    // Verificar tooltip
    const inputElement = page.locator('input[title*="√â necess√°rio carregar uma planilha"]');
    if (await inputElement.count() > 0) {
      console.log('‚úÖ Tooltip informativo presente');
    }

    console.log('üéâ Teste 9 conclu√≠do: Corre√ß√£o de Confer√™ncia verificada');
  });
});

test.describe('Resumo Final', () => {
  test('üìã RELAT√ìRIO FINAL: Todas as Funcionalidades', async ({ page }) => {
    console.log('\\n========================================');
    console.log('üìã RELAT√ìRIO FINAL DE FUNCIONALIDADES');
    console.log('========================================\\n');

    await page.setViewportSize({ width: 1440, height: 900 });
    await page.goto('http://localhost:5175');

    // Login
    await page.fill('[data-testid="username-input"]', 'admin@manipularium.com.br');
    await page.fill('[data-testid="password-input"]', 'manipularium');
    await page.click('[data-testid="login-button"]');
    await page.waitForTimeout(3000);

    const tabs = ['Lan√ßamentos', 'Confer√™ncia Banc√°ria', 'Confer√™ncia de Caixa', 'Relat√≥rio Di√°rio', 'A√ß√µes', 'Backup'];
    const results: { [key: string]: boolean } = {};

    for (const tab of tabs) {
      try {
        await page.click(`text=${tab}`);
        await page.waitForTimeout(2000);

        const errorScreen = page.locator('text="Erro na Aplica√ß√£o"');
        const hasError = await errorScreen.isVisible();
        results[tab] = !hasError;

        console.log(`${!hasError ? '‚úÖ' : '‚ùå'} ${tab}: ${!hasError ? 'Funcionando' : 'Com erro'}`);
      } catch (error) {
        results[tab] = false;
        console.log(`‚ùå ${tab}: Erro de navega√ß√£o`);
      }
    }

    // Screenshot final
    await page.screenshot({
      path: 'test-all-functions-final.png',
      fullPage: false
    });

    const workingTabs = Object.values(results).filter(Boolean).length;
    const totalTabs = tabs.length;

    console.log('\\n========================================');
    console.log(`üéØ RESULTADO: ${workingTabs}/${totalTabs} funcionalidades operacionais`);
    console.log('========================================\\n');

    // Esperar que pelo menos 80% das funcionalidades estejam funcionando
    expect(workingTabs / totalTabs).toBeGreaterThanOrEqual(0.8);
  });
});